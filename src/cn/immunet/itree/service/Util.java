package cn.immunet.itree.service;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;

import cn.immunet.itree.model.Config;

public class Util {
	
	public static int getFileLineNumber(File file) {
		int num = 0;
		try {
			InputStream in = new BufferedInputStream(new FileInputStream(file));
			try {
				int readChars;
				byte[] c = new byte[102400];
				while((readChars = in.read(c)) != -1) {
					for (int i = 0; i < readChars; i++ ) {
						if (c[i] == '\n') {
							num ++;
						}
					}
				}
			} finally {
				in.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return num;
	}
	
	public static String getAASEQPathName(String pathName) {
		return pathName + ".AASEQ";
	}
	
	public static String getPEPTIDEPathName(String pathName) {
		return pathName + ".PEPTIDE";
	}
	
	public static void printMatrixForPhylip(String[] names, float[][] matrix) {
		try {
			String targetPathName = Config.getInstance().getWorkPath() + "matrix";
			PrintWriter out = new PrintWriter(new FileWriter(new File(targetPathName)));
			try {
				int xLen = matrix.length;
				int yLen = matrix[0].length;
				out.println(xLen);
				for (int i = 0; i < xLen; i++ ) {
					out.print(names[i] + " ");
					for (int j = 0; j < yLen; j++ ) {
						out.print(matrix[i][j] + " ");
					}
					out.println();
				}
			} finally {
				out.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void printMatrixForMega(String[] names, float[][] matrix) {
		try {
			String targetPathName = Config.getInstance().getWorkPath() + "matrix.meg";
			PrintWriter out = new PrintWriter(new FileWriter(new File(targetPathName)));
			try {
				int xLen = matrix.length;
				out.println("#mega");
				out.println("!TITLE  Immune distance data generated by iTree;");
				out.println("!Format DataType=distance;");
				out.println();
				for (int i = 0; i < xLen; i ++ ) {
					out.println("#" + names[i]);
				}
				for (int i = 0; i < xLen; i++ ) {
					for (int j = 0; j < i; j++ ) {
						out.print(matrix[i][j] + " ");
					}
					out.println();
				}
			} finally {
				out.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void printMatrix(String[] names1, String[] names2, float[][] matrix) {
		try {
			String targetPathName = Config.getInstance().getWorkPath() + "Distance.csv";
			PrintWriter out = new PrintWriter(new FileWriter(new File(targetPathName)));
			try {
				int len1 = matrix.length;
				int len2 = matrix[0].length;
				out.print(" , ");
				for (int i = 0; i < len2; i ++ ) {
					out.print(names2[i] + ", ");
				}
				out.println();
				for (int i = 0; i < len1; i ++ ) {
					out.print(names1[i] + ", ");
					for (int j = 0; j < len2; j ++ ) {
						out.print(matrix[i][j] + ", ");
					}
					out.println();
				}
			} finally {
				out.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static String getFileName(String pathName) {
		String fileName = "";
		if (pathName != null && pathName.length() > 0) {
			int lastSlash = pathName.lastIndexOf('/');
			if (lastSlash > -1 && lastSlash < (pathName.length() - 1)) {
				fileName = pathName.substring(lastSlash + 1);
			}
		}
		return fileName;
	}
	
	public static String getExtensionName(String fileName) {
		String extensionName = "";
		if (fileName != null && fileName.length() > 0) {
			int lastDot = fileName.lastIndexOf('.');
			if (lastDot > -1 && lastDot < (fileName.length() - 1)) {
				extensionName = fileName.substring(lastDot + 1);
			}
		}
		return extensionName;
	}
	
	public static String getFileNameNoEx(String fileName) {
		String fileNameNoEx = "";
		if (fileName != null && fileName.length() > 0) {
			int lastDot = fileName.lastIndexOf('.');
			if (lastDot > -1 && lastDot < fileName.length()) {
				fileNameNoEx = fileName.substring(0, lastDot);
			}
		}
		return fileNameNoEx;
	}
	
	public static String[] getNames(String[] pathNames) {
		int len = pathNames.length;
		String[] names = new String[len];
		for (int i = 0; i < len; i++) {
			names[i] = Util.getFileNameNoEx(Util.getFileName(pathNames[i]));
		}
		return names;
	}
	
	public static String[] normalizePathName(String[] pathNames) {
		for (int i = 0, iLimit = pathNames.length; i < iLimit; i ++ ) {
			pathNames[i] = pathNames[i].replaceAll("\\\\", "/");
		}
		return pathNames;
	}
	
	public static String[] denormalizePathName(String[] pathNames) {
		for (int i = 0, iLimit = pathNames.length; i < iLimit; i ++ ) {
			pathNames[i] = pathNames[i].replaceAll("/", "\\\\");
		}
		return pathNames;
	}
	
	public static String normalizePathName(String pathName) {
		return pathName.replaceAll("\\\\", "/");
	}
	
	public static String denormalizePathName(String pathName) {
		return pathName.replaceAll("/", "\\\\");
	}
}
